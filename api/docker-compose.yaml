version: '3.8'

services:
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.13-rc-management-alpine
    hostname: rabbitmq
    ports:
      # RABBITMQ PORT
      - 5672:5672
        # RABBITMQ MANAGEMENT TOOL: localhost:15672
      - 15672:15672
    volumes:
      - /var/lib/rabbitmq
    env_file:
      - .env.development.local
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', '-q', 'ping']
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 90s
    networks:
      - node-network

  mongodb:
    container_name: mongodb
    image: mongo:latest
    restart: always
    ports:
      - 27017:27017
    volumes:
      - data-volume:/data/db
    healthcheck:
      test:
        [
          'CMD',
          'mongosh',
          '--quiet',
          'mongodb/sample',
          '--eval',
          "'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - node-network

  # cache:
  #   container_name: cache
  #   image: redis:latest
  #   restart: always
  #   ports:
  #     - 6379:6379
  #   command: redis-server --save 20 1 --loglevel warning
  #   volumes:
  #     - cache:/data
  #   networks:
  #     - node-network

  mongo-seed:
    container_name: mongo-seed
    build:
      context: ./mongo-seed
      dockerfile: ./Dockerfile
    depends_on:
      - mongodb
    links:
      - mongodb
    networks:
      - node-network

  app-users:
    container_name: app-users
    image: app-users:0.0.1
    build:
      context: ./
      target: development
      dockerfile: ./apps/app-users/Dockerfile
    command: npm run start:dev app-users
    env_file:
      - .env.development.local
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    restart: always
    working_dir: /usr/src/app
    ports:
      - 3001:3001
    expose:
      - 3001
    healthcheck:
      test: ['CMD', 'node', './healthCheck/index.js', 'app-users']
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 0s
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - node-network

  app-gateway:
    container_name: app-gateway
    image: app-gateway:0.0.1
    build:
      context: ./
      target: development
      dockerfile: ./apps/app-gateway/Dockerfile
    command: npm run start:dev app-gateway
    env_file:
      - .env.development.local
    ports:
      - 3000:3000
    expose:
      - 3000
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    restart: always
    working_dir: /usr/src/app
    depends_on:
      app-users:
        condition: service_healthy
    networks:
      - node-network

volumes:
  cache:
    driver: local
  data-volume:
    driver: local

networks:
  node-network:
    driver: bridge
